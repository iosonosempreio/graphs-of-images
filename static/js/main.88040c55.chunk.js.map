{"version":3,"sources":["components/network/Network.js","App.js","reportWebVitals.js","index.js"],"names":["nodes","width","window","innerWidth","height","innerHeight","app","PIXI","backgroundColor","resolution","devicePixelRatio","viewport","Viewport","passiveWheel","stopPropagation","screenWidth","screenHeight","worldWidth","worldHeight","interaction","renderer","plugins","clampZoom","minScale","maxScale","drag","pressDrag","clampWheel","pinch","wheel","stage","addChild","container","x","screen","y","pivot","spritesheetsList","Array","from","i","forEach","d","loader","add","process","onProgress","e","console","log","progress","onComplete","a","resources","s","sheet","spritesheet","textureName","texture","textures","sprite","nodeData","find","n","attributes","image","anchor","scale","Math","min","orig","Network","useRef","useEffect","json","then","data","filter","type","current","appendChild","view","load","ref","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAMUA,E,iGADJC,EAAQC,OAAOC,WAAYC,EAASF,OAAOG,YAG7CC,EAAM,IAAIC,cAAiB,CAC7BC,gBAAiB,SACjBC,WAAYP,OAAOQ,kBAAoB,EACvCT,MAAOA,EACPG,OAAQA,IAGJO,EAAW,IAAIC,IAAS,CAC5BC,cAAc,EACdC,iBAAiB,EACjBC,YAAad,EACbe,aAAcZ,EACda,WAAYhB,EACZiB,YAAad,EACbe,YAAab,EAAIc,SAASC,QAAQF,cAEpCR,EACGW,UAAU,CACTC,SAAS,GACTC,SAAS,KAEVC,KAAK,CAACC,WAAU,EAAMC,YAAW,IACjCC,QACAC,QACHvB,EAAIwB,MAAMC,SAASpB,GAEnB,IAAMqB,EAAY,IAAIzB,YACtBI,EAASoB,SAASC,GAGlBA,EAAUC,EAAI3B,EAAI4B,OAAOjC,MAAQ,EACjC+B,EAAUG,EAAI7B,EAAI4B,OAAO9B,OAAS,EAGlC4B,EAAUI,MAAMH,EAAID,EAAU/B,MAAQ,EACtC+B,EAAUI,MAAMD,EAAIH,EAAU5B,OAAS,EAEvC,IAAMiC,EAAmBC,MAAMC,KAAMD,MAAM,KAAK,SAACL,EAAEO,GAAH,gDAA0CA,EAAE,EAA5C,YAEhDH,EAAiBI,SAAQ,SAACC,GACxBpC,EAAIqC,OAAOC,IAAIC,oBAAyBH,MAE1CpC,EAAIqC,OAAOG,WAAWF,KAAI,SAACG,GACzBC,QAAQC,IAAIF,EAAEG,SAAW,QAE3B5C,EAAIqC,OAAOQ,WAAWP,IAAtB,cAAAQ,EAAA,MAA0B,sBAAAA,EAAA,sDACxBJ,QAAQC,IAAI,mBAAoB3C,EAAIqC,OAAOU,WAC3ChB,EAAiBI,SAAQ,SAACa,GACxB,IAAMC,EAAQjD,EAAIqC,OAAOU,UAAUC,GAAGE,YADR,WAErBC,GAEP,IAAMC,EAAUH,EAAMI,SAASF,GACzBG,EAAS,IAAIrD,SAAYmD,GAEzBG,EAAW7D,EAAM8D,MAAK,SAAAC,GAAC,OAAEA,EAAEC,WAAWC,QAAQR,KAEhDI,GACFD,EAAO3B,EAAgB,GAAZ4B,EAAS5B,EACpB2B,EAAOzB,EAAgB,GAAZ0B,EAAS1B,IAEpByB,EAAO3B,EAAI,EACX2B,EAAOzB,EAAI,GAGbyB,EAAOM,OAAOjC,EAAI,GAClB2B,EAAOM,OAAO/B,EAAI,GAElB,IAAMgC,EAAQC,KAAKC,IAAI,GAAKX,EAAQY,KAAKrE,MAAO,IAAMyD,EAAQY,KAAKlE,QACnEwD,EAAOO,MAAMlC,EAAIkC,EACjBP,EAAOO,MAAMhC,EAAIgC,EAEjBnC,EAAUD,SAAS6B,IAtBrB,IAAK,IAAIH,KAAeF,EAAMI,SAAW,EAAhCF,MAJa,4CA4CXc,MAbf,WACE,IAAMvC,EAAYwC,mBASlB,OARAC,qBAAU,WACRC,YAAK7B,8BAAsC8B,MAAK,SAAAC,GAC9C5E,EAAQ4E,EAAK5E,MAAM6E,QAAO,SAAAd,GAAC,MAAsB,SAApBA,EAAEC,WAAWc,QAC1C9C,EAAU+C,QAAQC,YAAY1E,EAAI2E,MAClC3E,EAAIqC,OAAOuC,YAEZ,IAEI,qBAAKC,IAAKnD,K,MCnFJoD,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.88040c55.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as PIXI from \"pixi.js\";\nimport { json } from \"d3\";\nimport { Viewport } from \"pixi-viewport\";\n\nconst width = window.innerWidth, height = window.innerHeight;\nlet data, nodes, edges;\n\nlet app = new PIXI.Application({\n  backgroundColor: 0xf1f1f1,\n  resolution: window.devicePixelRatio || 1,\n  width: width,\n  height: height\n});\n\nconst viewport = new Viewport({\n  passiveWheel: false,\n  stopPropagation: true,\n  screenWidth: width,\n  screenHeight: height,\n  worldWidth: width,\n  worldHeight: height,\n  interaction: app.renderer.plugins.interaction // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n});\nviewport\n  .clampZoom({\n    minScale:0.1,\n    maxScale:10\n  })\n  .drag({pressDrag:true, clampWheel:true})\n  .pinch()\n  .wheel()\napp.stage.addChild(viewport);\n\nconst container = new PIXI.Container();\nviewport.addChild(container);\n\n// Move container to the center\ncontainer.x = app.screen.width / 2;\ncontainer.y = app.screen.height / 2;\n\n// Center bunny sprite in local container coordinates\ncontainer.pivot.x = container.width / 2;\ncontainer.pivot.y = container.height / 2;\n\nconst spritesheetsList = Array.from( Array(15), (x,i)=>`images/spritesheets/spritesheet-${i+1}.json`)\n\nspritesheetsList.forEach((d) => {\n  app.loader.add(process.env.PUBLIC_URL + d);\n});\napp.loader.onProgress.add((e) => {\n  console.log(e.progress + \"%\");\n});\napp.loader.onComplete.add(async () => {\n  console.log(\"loader completed\", app.loader.resources);\n  spritesheetsList.forEach((s) => {\n    const sheet = app.loader.resources[s].spritesheet;\n    for (let textureName in sheet.textures) {\n      // console.log(textureName)\n      const texture = sheet.textures[textureName];\n      const sprite = new PIXI.Sprite(texture);\n\n      const nodeData = nodes.find(n=>n.attributes.image===textureName)\n\n      if (nodeData) {\n        sprite.x = nodeData.x *0.5\n        sprite.y = nodeData.y *0.5\n      } else {\n        sprite.x = 0\n        sprite.y = 0\n      }\n\n      sprite.anchor.x = 0.5;\n      sprite.anchor.y = 0.5;\n\n      const scale = Math.min(50 / texture.orig.width, 100 / texture.orig.height);\n      sprite.scale.x = scale;\n      sprite.scale.y = scale;\n\n      container.addChild(sprite);\n    }\n  });\n});\n\nfunction Network() {\n  const container = useRef();\n  useEffect(() => {\n    json(process.env.PUBLIC_URL + \"data.json\").then(data=>{\n      nodes = data.nodes.filter(n=>n.attributes.type===\"post\")\n      container.current.appendChild(app.view);\n      app.loader.load();\n    })\n  }, []);\n\n  return <div ref={container}></div>;\n}\n\nexport default Network;\n","import Network from './components/network';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Network />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}